// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jumata96/pac-ent/ent/entrenador"
	"github.com/jumata96/pac-ent/ent/predicate"
)

// EntrenadorUpdate is the builder for updating Entrenador entities.
type EntrenadorUpdate struct {
	config
	hooks    []Hook
	mutation *EntrenadorMutation
}

// Where appends a list predicates to the EntrenadorUpdate builder.
func (eu *EntrenadorUpdate) Where(ps ...predicate.Entrenador) *EntrenadorUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// Mutation returns the EntrenadorMutation object of the builder.
func (eu *EntrenadorUpdate) Mutation() *EntrenadorMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntrenadorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntrenadorUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntrenadorUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntrenadorUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EntrenadorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entrenador.Table, entrenador.Columns, sqlgraph.NewFieldSpec(entrenador.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entrenador.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntrenadorUpdateOne is the builder for updating a single Entrenador entity.
type EntrenadorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntrenadorMutation
}

// Mutation returns the EntrenadorMutation object of the builder.
func (euo *EntrenadorUpdateOne) Mutation() *EntrenadorMutation {
	return euo.mutation
}

// Where appends a list predicates to the EntrenadorUpdate builder.
func (euo *EntrenadorUpdateOne) Where(ps ...predicate.Entrenador) *EntrenadorUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntrenadorUpdateOne) Select(field string, fields ...string) *EntrenadorUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entrenador entity.
func (euo *EntrenadorUpdateOne) Save(ctx context.Context) (*Entrenador, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntrenadorUpdateOne) SaveX(ctx context.Context) *Entrenador {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntrenadorUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntrenadorUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EntrenadorUpdateOne) sqlSave(ctx context.Context) (_node *Entrenador, err error) {
	_spec := sqlgraph.NewUpdateSpec(entrenador.Table, entrenador.Columns, sqlgraph.NewFieldSpec(entrenador.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entrenador.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entrenador.FieldID)
		for _, f := range fields {
			if !entrenador.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entrenador.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &Entrenador{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entrenador.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
